/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "java"
    id "com.google.cloud.tools.jib" version "2.4.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "com.github.harbby.gradle.serviceloader" version "1.1.2"
}


group = "com.google.spanner"


if (project.hasProperty('tagVersion') && project.tagVersion.trim()) {
    project.version = project.tagVersion.trim()
} else {
   project.version = "SNAPSHOT"
}


repositories {
    mavenCentral()
    jcenter()
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

serviceLoader {
    serviceInterface 'liquibase.database.Database'
    serviceInterface 'liquibase.datatype.LiquibaseDataType'
    serviceInterface 'liquibase.sqlgenerator.SqlGenerator'
    serviceInterface 'liquibase.change.Change'
    serviceInterface 'liquibase.changelog.ChangeLogHistoryService'
}

dependencies {

    // Cloud Spanner related
    implementation platform('com.google.cloud:libraries-bom:12.0.0')
    
    implementation("com.google.cloud:google-cloud-spanner-jdbc")
    implementation("com.google.cloud:google-cloud-logging-logback")

    // Liquibase Core - needed for testing and docker container
    implementation("org.liquibase:liquibase-core:4.2.0")
    implementation("org.yaml:snakeyaml:1.26")
    
    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
    testImplementation("org.testcontainers:testcontainers:1.15.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
    testImplementation("com.google.truth:truth:1.0.1")
    testImplementation("org.mockito:mockito-core:1.10.19")

    // For testing runtime
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    
    // For Spanner mock server testing
    testImplementation(group: 'com.google.cloud', name: 'google-cloud-spanner', classifier: 'tests')
    testImplementation("com.google.api.grpc:grpc-google-cloud-spanner-v1")
    testImplementation("com.google.api.grpc:grpc-google-cloud-spanner-admin-instance-v1")
    testImplementation("com.google.api.grpc:grpc-google-cloud-spanner-admin-database-v1")
    testImplementation(group: 'com.google.api', name: 'gax-grpc', version: '1.60.0', classifier: 'testlib')
}


// Run unit tests (Spanner emulator and mock tests)
test {

  // serviceLoaderBuild is necessary for Liquibase to find the extensions
  dependsOn "serviceLoaderBuild"

  useJUnitPlatform {
    excludeTags "integration"
  }
}


// Run integration tests (against live Spanner)
//
// Requires SPANNER_PROJECT and SPANNER_INSTANCE environment variables.
// Also requires GOOGLE_APPLICATION_CREDENTIALS environment variable
// if using a JSON key for authentication.
task integrationTest(type: Test) {
  shouldRunAfter "test"

  // serviceLoaderBuild is necessary for Liquibase to find the extensions
  dependsOn "serviceLoaderBuild"

  useJUnitPlatform {
    includeTags "integration"
  }
}

// Output shadowJar that can be used directly by Liquibase
//
// This contains all Cloud Spanner dependencies.
shadowJar {
    dependsOn("test")
    archiveBaseName.set("liquibase-extension")
    mergeServiceFiles()
    dependencies {
        exclude([
          dependency("org.liquibase:liquibase-core")
        ])
    }
}

// Output runnable docker container.
//
// The docker container has everything you need to run Liquibase with Spanner.
jib {
    from {
        image = "gcr.io/distroless/java:8"
    }
    to {
        image = "spanner-liquibase"
    }
    container {
        mainClass = 'liquibase.integration.commandline.Main'
    }
}

